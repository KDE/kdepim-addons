/*
   SPDX-FileCopyrightText: 2025 Laurent Montel <montel@kde.org>

   SPDX-License-Identifier: GPL-2.0-or-later
*/

#include "autogenerateconfigureaskmenu.h"
#include "autogenerateconfigureaskdialog.h"
#include "autogenerateconfigureaskmanager.h"
#include <TextAutogenerateText/TextAutogenerateDialog>

#include <KLocalizedString>
#include <QMenu>

AutogenerateConfigureAskMenu::AutogenerateConfigureAskMenu(AutogenerateConfigureAskManager *manager, QObject *parent)
    : QObject{parent}
    , mManager(manager)
    , mMenu(new QMenu)
{
    mManager->load();
    mMenu->setTitle(i18n("Ask AI…"));
    // mMenu->setIcon(QIcon::fromTheme(QStringLiteral("document-share")));
    mMenu->setObjectName(QStringLiteral("mMenu"));
    initializeMenu();
}

AutogenerateConfigureAskMenu::~AutogenerateConfigureAskMenu()
{
    delete mMenu;
}

void AutogenerateConfigureAskMenu::initializeMenu()
{
    const auto infos = mManager->items();
    for (const AutogenerateConfigureAskItem &info : infos) {
        if (info.enabled()) {
            const QString requestText = info.title();
            auto action = new QAction(requestText, mMenu);
            connect(action, &QAction::triggered, this, [requestText, this]() {
                TextAutogenerateText::TextAutogenerateDialog *dlg = new TextAutogenerateText::TextAutogenerateDialog;
                dlg->setAttribute(Qt::WA_DeleteOnClose);
                dlg->show();
                dlg->ask(QStringLiteral("%1 %2").arg(requestText, mSelectedText));
            });
            mMenu->addAction(action);
        }
    }
    auto configureAction = new QAction(i18nc("@action", "Configure…"), mMenu);
    connect(configureAction, &QAction::triggered, this, &AutogenerateConfigureAskMenu::slotConfigure);
    if (!mMenu->isEmpty()) {
        mMenu->addSeparator();
    }
    mMenu->addAction(configureAction);
}

void AutogenerateConfigureAskMenu::slotConfigure()
{
    AutogenerateConfigureAskDialog dlg(mParentWidget);
    if (dlg.exec()) {
        // TODO
    }
    // TODO
}

QString AutogenerateConfigureAskMenu::selectedText() const
{
    return mSelectedText;
}

void AutogenerateConfigureAskMenu::setSelectedText(const QString &newSelectedText)
{
    mSelectedText = newSelectedText;
}

QWidget *AutogenerateConfigureAskMenu::parentWidget() const
{
    return mParentWidget;
}

void AutogenerateConfigureAskMenu::setParentWidget(QWidget *newParentWidget)
{
    mParentWidget = newParentWidget;
}

QMenu *AutogenerateConfigureAskMenu::menu() const
{
    return mMenu;
}

#include "moc_autogenerateconfigureaskmenu.cpp"
